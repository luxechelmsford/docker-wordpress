#!/bin/bash


#######################################
# FUNCTIONS
#######################################

help() {
  cat << EOF
Command line interface for the Docker-based web development environment wordpress.
  Usage: cmdwp  [options [arguments] ]
  Available options:
    [-c|cmd=build] .................. Build all of the images or the specified one
      [-i|--image=imageName]            The secific image to be built. '-i=' will build all images
                                          Valid values for imageName are:
                                             nginx, wpbackup & webdrive
    [-c|cmd=logs] ................... Display and tail the logs of all containers or the specified one's
      <-n|--name=siteName>              The secific website for which the logs are to be monitored.
      [-i|--image=imageName]            The secific image for which the log is to be monitored. '-i=' will monitor all logs
                                          Valid values for imageName are:
                                             mysql, wordpress, phpadmin, nginx, wpbackup & webdrive
    [-c|cmd=destroy] ................ Remove the Docker environment
      <-n|--name=siteName>              The secific website to be destroyed.
    [-c|cmd=up] ...................... Build and start a container
      <-n|--name=siteName>              The secific website to be built and started. 
    [-c|cmd=down] ................... Stop and destroy a container.
      <-n|--name=siteName>             The secific website to be stopped and destoyed.
      [-v]                              Destroy the volumes as well
    [-c|cmd=start] .................. Start a container
      <-n|--name=siteName>              The secific website to be built and started.
    [-c|cmd=stop] ................... Stop the containers
      <-n|--name=siteName>              The secific website to be built and stopped.
    [-c|cmd=restart] ................ Restart a containers
      <-n|--name=siteName>              The secific website to be built and restarted.
    [-c|cmd=site] ................... Manage a website configuration
      [-a|add] ....................   Add the configuration of a new website 
        <-n|--name=websiteName>         The secific website whose configration is to be added.
        <-p|--http-port=port>           Numeric port value for http connection
        <-x|--https-port=port]>         Numeric port value for ssl/https/X.509
        <-w|--web-url=url>              The web url e.g. www.example.com.
                                        The wordpress site var is set to this
                                        So any other urls are eventually redireded to this uRL 
        [-u|--add-url=url]              The additional url, e.g. example.com
      [-e|--edit] .................   Edit the configuration of an existing website
        <-n|--name=websiteName>         The secific website whose configration is to be added.
        [-p|--http-port=port]           Numeric port value for http connection
        [-x|--https-port=port]          Numeric port value for ssl/https/X.509
        [-w|--web-url=url]              The web url e.g. www.example.com.
                                        The wordpress site var is set to this
                                        So any other urls are eventually redireded to this uRL 
        [-u|--add-url=url]              The additional url, e.g. example.com
      [-v|--view] .................   View all site details ot the specified one's
        [-n|--name=websiteName]         The name of the site to be viewed. -s= will list all sites
      [-d|--del] ..................   Delete the specified site detials
        <-n|--name=websiteName>         The name of the site to be deleted
      [-r|--rebuild] ..............   Rebuild all site yamls - should be used when template files are changed
        [-n|--name=websiteName]         The name of the site whose yaml to be rebuilt. -s= will rebuilt yaml for all sites
    [-c|cmd=cert-gen] ...............  Generate a new certificate
      <-n|--name=siteName>               The name of the site fr which the certificates are to be generated
      <-u|url=siteUrl>                   The site url for which the certificate to be generated
    [-c|cmd=cert-inst] ............... Install the certificate
      <-n|--name=siteName>                The name of the site fr which the certificates are to be insatlled
    [-h|--help] ...................... Display this help menu

EOF
}



# Build all of the images, or the passed one
build () {
  if [ -n "$IMAGE_NAME" ]  && [ "$IMAGE_NAME" != "mysql" ]  && [ "$IMAGE_NAME" != "nginx" ]  \
     &&   [ "$IMAGE_NAME" != "wpbackup" ] && [ "$IMAGE_NAME" != "webdrive" ]
  then
    echo "Invalid image name [$IMAGE_NAME] passed. Valid values are <blank>, mysql, nginx, wpbackup and webdrive"
    echo ""
    echo ""
    exit 1;
  fi
  
  if [ -z "$IMAGE_NAME" ] || [ "$IMAGE_NAME" == "mysql" ]; then
    echo "Building image [mysql] ..."
    docker build --no-cache --tag thetek/mysql:8.0.22 --label thetek_mysql:latest ./.docker/mysql
    docker image prune --force --filter='label=thetek_mysql:latest'
    echo ""
  fi
  
  if [ -z "$IMAGE_NAME" ] || [ "$IMAGE_NAME" == "nginx" ]; then
    echo "Building image [nginx] ..."
    docker build --no-cache --tag thetek/nginx:1.17-alpine --label thetek_nginx:latest ./.docker/nginx
    docker image prune --force --filter='label=thetek_nginx:latest'
    echo ""
  fi
  
  if [ -z "$IMAGE_NAME" ] || [ "$IMAGE_NAME" == "wpbackup" ]; then
    echo "Building image [wpbackup] ..."
    docker build --no-cache --tag thetek/wpbackup:1.0.0 --label thetek_wpbackup:latest ./.docker/wpbackup
    docker image prune --force --filter='label=thetek_wpbackup:latest'
    echo ""
  fi
  
  if [ -z "$IMAGE_NAME" ] || [ "$IMAGE_NAME" == "webdrive" ]; then
    echo "Building image [webdrive] ..."
    docker build --no-cache --tag thetek/webdrive:1.0.0 --label thetek_webdrive:latest ./.docker/webdrive
    docker image prune --force --filter='label=thetek_webdrive:latest'
    echo ""
  fi
  echo ""
}

# Display and tail the logs of all containers or the specified one's
logs () {
  if [ ! -f "docker-compose-${WEBSITE_NAME}.yml" ]; then    
    echo "Could't find the YAML file [docker-compose-${WEBSITE_NAME}.yml]. Please add the site and try again"
    echo ""
    echo ""
    exit 1;    
  fi
  docker-compose -f docker-compose-${WEBSITE_NAME}.yml -p=${WEBSITE_NAME} logs -f "${IMAGE_NAME}"
}

# Remove the entire Docker environment
destroy () {
  if [ ! -f "docker-compose-${WEBSITE_NAME}.yml" ]; then    
    echo "Could't find the YAML file [docker-compose-${WEBSITE_NAME}.yml]. Please add the site and try again"
    echo ""
    echo ""
    exit 1;    
  fi
  read -p "This will delete containers, volumes and images for ${WEBSITE_NAME}. Are you sure? [y/N]: " -r
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit; fi
  docker-compose -f docker-compose-${WEBSITE_NAME}.yml -p=${WEBSITE_NAME} down $DESTROY_VOLUME --rmi all
}

# Build & start the containers
up () {
  if [ ! -f "docker-compose-${WEBSITE_NAME}.yml" ]; then    
    echo "Could't find the YAML file [docker-compose-${WEBSITE_NAME}.yml]. Please add the site and try again"
    echo ""
    echo ""
    exit 1;    
  fi
  docker-compose -f docker-compose-${WEBSITE_NAME}.yml -p=${WEBSITE_NAME} up -d
}

# Stop and destroy the containers
down () {
  if [ ! -f "docker-compose-${WEBSITE_NAME}.yml" ]; then    
    echo "Could't find the YAML file [docker-compose-${WEBSITE_NAME}.yml]. Please add the site and try again"
    echo ""
    echo ""
    exit 1;    
  fi
  docker-compose -f docker-compose-${WEBSITE_NAME}.yml -p=${WEBSITE_NAME} down
}

# Start the containers
start () {
  if [ ! -f "docker-compose-${WEBSITE_NAME}.yml" ]; then    
    echo "Could't find the YAML file [docker-compose-${WEBSITE_NAME}.yml]. Please add the site and try again"
    echo ""
    echo ""
    exit 1;    
  fi
  docker-compose -f docker-compose-${WEBSITE_NAME}.yml -p=${WEBSITE_NAME} start -d
}

# Stop the containers
stop () {
  if [ ! -f "docker-compose-${WEBSITE_NAME}.yml" ]; then    
    echo "Could't find the YAML file [docker-compose-${WEBSITE_NAME}.yml]. Please add the site and try again"
    echo ""
    echo ""
    exit 1;    
  fi
  docker-compose -f docker-compose-${WEBSITE_NAME}.yml -p=.${WEBSITE_NAME} stop
}

# Restart the containers
restart () {
    stop && start;
}

# Generate a wildcard certificate
cert_generate () {
    rm -Rf .docker/nginx/certs/$1.*
    docker-compose -f docker-compose.yml -f docker-compose-$1.yml  --env-file ./apps/.env.$1 run --rm nginx sh -c "cd /etc/nginx/certs && touch openssl.cnf && cat /etc/ssl/openssl.cnf > openssl.cnf && echo \"\" >> openssl.cnf && echo \"[ SAN ]\" >> openssl.cnf && echo \"subjectAltName=DNS.1:$2,DNS.2:*.$2\" >> openssl.cnf && openssl req -x509 -sha256 -nodes -newkey rsa:4096 -keyout $1.key -out $1.crt -days 3650 -subj \"/CN=*.$2\" -config openssl.cnf -extensions SAN && rm openssl.cnf"
    down "$1"
}

# Install the certificate
cert_install () {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain .docker/nginx/certs/$1.crt
    elif [[ "$OSTYPE" == "linux-gnu" ]]; then
        sudo ln -s "$(pwd)/.docker/nginx/certs/$1.crt" /usr/local/share/ca-certificates/$1.crt
        sudo update-ca-certificates
    else
        echo "Could not install the certificate on the host machine, please do it manually"
    fi
}



##################################
# Main Processing block          #
##################################

# to do correct this to also work with linux
SCRIPT_PATH=$(cd "$(dirname "$0")"; pwd)
ROOT_DIR=${SCRIPT_PATH%/*}
SCRIPT_FILE="${SCRIPT_PATH}/wpcmd" 

# set the environment variables from the argument
# iterate all but the last
options=()
# Iterate through all arguments and find the command to be executed
options=()
for arg in "$@"; do 
  if [ "${arg%%=*}" == "-c" ] || [ "${arg%%=*}" == "-cmd" ]; then
    COMMAND="${arg#*=}"
  elif [ "${arg}" == "-h" ] || [ "${arg}" == "-help" ]; then
    COMMAND="help"
  else
    # save as a potetial options to be iterated later
    options+=($arg)
  fi
done

VALID_COMMANDS=("build" "logs" "destroy" "up" "down" "start" "stop" "restart" "site" "cert_gen" "cert_inst" "help")

if [[ ! " ${VALID_COMMANDS[@]} " =~ " ${COMMAND} " ]]; then
  # unknown command
  help;
  echo "Unknown command [${COMMAND}] found."
  echo "Please see above for a detailed list of commands available"
  echo ""
  echo ""
  exit 1;
elif [ "${COMMAND}" == "help" ]; then
  help;
  echo ""
  exit 1;
elif [ -z "${COMMAND}" ]; then
  # No command
  help;
  echo "A command must be specifcy using <-c|--cmd=command>"
  echo "Please see above for a detailed list of commands available"
  echo ""
  echo ""
  exit 1;
elif [ "${COMMAND}" == "site" ]; then
  bash "${SCRIPT_PATH}/apps/site/site" ${options[@]}
  exit 1;
elif [ "${COMMAND}" == "cert-gen" ] || [ "${COMMAND}" == "cert-inst" ]; then
  # to do handle certification code
  bash "${SCRIPT_PATH}/apps/cert" ${options}
fi

OPTION_I_COMMANDS=("build" "logs")
OPTION_V_COMMANDS=("destroy")
OPTION_N_COMMANDS=("logs" "destroy" "up" "down" "start" "stop" "restart")

for option in ${options[@]}; do
  case $option in
    -i=*|--image=*)
      if [[ " ${OPTION_I_COMMANDS[@]} " =~ " ${COMMAND} " ]]; then
        IMAGE_NAME="${option#*=}"
        shift # past option=value
      else
        UNKNOWN_OPTION="${option}"
      fi
      ;;
    -v|--volume)
      if [[ " ${OPTION_V_COMMANDS[@]} " =~ " ${COMMAND} " ]]; then
        DESTROY_VOLUME="-v"
        shift # past this optionoption
      else
        UNKNOWN_OPTION="${option}"
      fi
      ;;
    -n=*|--name=*)
      if [[ " ${OPTION_N_COMMANDS[@]} " =~ " ${COMMAND} " ]]; then
        WEBSITE_NAME="${option#*=}"
        shift # past option=value
      else
        UNKNOWN_OPTION="${option}"
      fi
      ;;
    *)
      # unknown option
      UNKNOWN_OPTION="${option}"
      ;;
  esac
  
  if [ ! -z "${UNKNOWN_OPTION}" ]; then
    echo "Unknown option [${UNKNOWN_OPTION}] found for ${COMMAND} command"
    echo "Use [-h|--help] for detailed argument list"
    echo ""
    echo ""
    exit 1;
  fi
done

# Now handle any options not set for a specific command
OPTION_I_MANDATORY_COMMANDS=("")
OPTION_V_MANDATORY_COMMANDS=("")
OPTION_N_MANDATORY_COMMANDS=("logs" "destroy" "up" "down" "start" "stop"  "restart")

# Check that the Image Name is set for all commnads that specifies it as a mandatory option
if [[ " ${OPTION_I_MANDATORY_COMMANDS[@]} " =~ " ${COMMAND} " ]] && [ -z "${IMAGE_NAME}" ]; then
  echo "A Image Name must be specified using <-i|--image=imageName> for [${COMMAND}] command"
  echo "Use [-h|--help] for detailed argument list"
  echo ""
  echo ""
  exit 1;
fi

# Check that the Destroy Volume option is set for all commnads that specifies it as a mandatory option
if [[ " ${OPTION_V_MANDATORY_COMMANDS[@]} " =~ " ${COMMAND} " ]] && [ -z "${DESTROY_VOLUME}" ]; then
  echo "A destroy Volume Option must be specified using <-v|--volume> for [${COMMAND}] command"
  echo "Use [-h|--help] for detailed argument list"
  echo ""
  echo ""
  exit 1;
fi

# Check that the Site Name is set for all commnads that specifies it as a mandatory option
if [[ " ${OPTION_N_MANDATORY_COMMANDS[@]} " =~ " ${COMMAND} " ]] && [ -z "${WEBSITE_NAME}" ]; then
  echo "A website name must be specified using <-n|--name=siteName> for [${COMMAND}] command"
  echo "Use [-h|--help] for detailed argument list"
  echo ""
  echo ""
  exit 1;
fi

#F Finallly call the command
"${COMMAND}";
